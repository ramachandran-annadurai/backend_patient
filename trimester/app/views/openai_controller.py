from fastapi import APIRouter, HTTPException, Query, Depends
from typing import Optional
from app.models.pregnancy_models import QuickActionResponse
from app.services.openai_service import OpenAIBabySizeService
from app.services.pregnancy_data_service import PregnancyDataService
from app.config.settings import settings
from app.dependencies import container

class OpenAIController:
    def __init__(self):
        self.router = APIRouter(prefix="/pregnancy", tags=["openai"])
        self._setup_routes()
    
    def get_openai_service(self):
        """Dependency to get OpenAI service"""
        return container.openai_service
    
    def get_pregnancy_service(self):
        """Dependency to get pregnancy service"""
        return container.pregnancy_service
    
    def _setup_routes(self):
        """Setup all the OpenAI-related API routes"""
        
        @self.router.get("/week/{week}/baby-size", response_model=dict)
        async def get_baby_size_openai(
            week: int,
            openai_service: OpenAIBabySizeService = Depends(self.get_openai_service)
        ):
            """
            Get AI-powered baby size information for a specific week
            
            Args:
                week: Pregnancy week (1-40)
            
            Returns:
                Detailed baby size information generated by OpenAI
            """
            try:
                if week < 1 or week > 40:
                    raise HTTPException(
                        status_code=400, 
                        detail="Week must be between 1 and 40"
                    )
                
                if not openai_service:
                    raise HTTPException(
                        status_code=503, 
                        detail="OpenAI service not available. Please check your API key configuration."
                    )
                
                # Get basic baby size
                baby_size = await openai_service.get_baby_size_for_week(week)
                
                # Get detailed information
                detailed_info = await openai_service.get_detailed_baby_info(week)
                
                return {
                    "success": True,
                    "week": week,
                    "baby_size": baby_size,
                    "detailed_info": detailed_info,
                    "message": f"Successfully generated AI-powered baby size for week {week}"
                }
            
            except ValueError as e:
                raise HTTPException(status_code=404, detail=str(e))
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
        
        @self.router.get("/openai/status", response_model=dict)
        async def get_openai_status():
            """
            Check if OpenAI service is available and configured
            
            Returns:
                OpenAI service status and configuration
            """
            openai_service = self.get_openai_service()
            return {
                "success": True,
                "openai_available": openai_service is not None,
                "model": settings.OPENAI_MODEL if openai_service else None,
                "api_key_configured": bool(settings.OPENAI_API_KEY),
                "message": "OpenAI service status retrieved successfully"
            }
        
        @self.router.get("/week/{week}/symptoms", response_model=QuickActionResponse)
        async def get_early_symptoms(
            week: int,
            openai_service: OpenAIBabySizeService = Depends(self.get_openai_service),
            pregnancy_service: PregnancyDataService = Depends(self.get_pregnancy_service)
        ):
            """
            Get AI-powered early symptoms information for a specific week
            
            Args:
                week: Pregnancy week (1-40)
            
            Returns:
                Detailed symptoms information with relief tips and when to call doctor
            """
            try:
                if week < 1 or week > 40:
                    raise HTTPException(
                        status_code=400, 
                        detail="Week must be between 1 and 40"
                    )
                
                if not openai_service:
                    raise HTTPException(
                        status_code=503, 
                        detail="OpenAI service not available. Please check your API key configuration."
                    )
                
                # Get week data for trimester info
                week_data = pregnancy_service.get_week_data(week)
                
                # Get AI-powered symptoms
                symptoms_info = await openai_service.get_early_symptoms(week)
                
                return QuickActionResponse(
                    success=True,
                    week=week,
                    trimester=week_data.trimester,
                    action_type="early_symptoms",
                    data=symptoms_info.dict(),
                    message=f"Successfully generated early symptoms information for week {week}"
                )
            
            except ValueError as e:
                raise HTTPException(status_code=404, detail=str(e))
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
        
        @self.router.get("/week/{week}/screening", response_model=QuickActionResponse)
        async def get_prenatal_screening(
            week: int,
            openai_service: OpenAIBabySizeService = Depends(self.get_openai_service),
            pregnancy_service: PregnancyDataService = Depends(self.get_pregnancy_service)
        ):
            """
            Get AI-powered prenatal screening information for a specific week
            
            Args:
                week: Pregnancy week (1-40)
            
            Returns:
                Detailed screening information with recommended tests and timing
            """
            try:
                if week < 1 or week > 40:
                    raise HTTPException(
                        status_code=400, 
                        detail="Week must be between 1 and 40"
                    )
                
                if not openai_service:
                    raise HTTPException(
                        status_code=503, 
                        detail="OpenAI service not available. Please check your API key configuration."
                    )
                
                # Get week data for trimester info
                week_data = pregnancy_service.get_week_data(week)
                
                # Get AI-powered screening
                screening_info = await openai_service.get_prenatal_screening(week)
                
                return QuickActionResponse(
                    success=True,
                    week=week,
                    trimester=week_data.trimester,
                    action_type="prenatal_screening",
                    data=screening_info.dict(),
                    message=f"Successfully generated prenatal screening information for week {week}"
                )
            
            except ValueError as e:
                raise HTTPException(status_code=404, detail=str(e))
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
        
        @self.router.get("/week/{week}/wellness", response_model=QuickActionResponse)
        async def get_wellness_tips(
            week: int,
            openai_service: OpenAIBabySizeService = Depends(self.get_openai_service),
            pregnancy_service: PregnancyDataService = Depends(self.get_pregnancy_service)
        ):
            """
            Get AI-powered wellness tips for a specific week
            
            Args:
                week: Pregnancy week (1-40)
            
            Returns:
                Detailed wellness information with exercise, sleep, and stress management tips
            """
            try:
                if week < 1 or week > 40:
                    raise HTTPException(
                        status_code=400, 
                        detail="Week must be between 1 and 40"
                    )
                
                if not openai_service:
                    raise HTTPException(
                        status_code=503, 
                        detail="OpenAI service not available. Please check your API key configuration."
                    )
                
                # Get week data for trimester info
                week_data = pregnancy_service.get_week_data(week)
                
                # Get AI-powered wellness tips
                wellness_info = await openai_service.get_wellness_tips(week)
                
                return QuickActionResponse(
                    success=True,
                    week=week,
                    trimester=week_data.trimester,
                    action_type="wellness_tips",
                    data=wellness_info.dict(),
                    message=f"Successfully generated wellness tips for week {week}"
                )
            
            except ValueError as e:
                raise HTTPException(status_code=404, detail=str(e))
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
        
        @self.router.get("/week/{week}/nutrition", response_model=QuickActionResponse)
        async def get_nutrition_tips(
            week: int,
            openai_service: OpenAIBabySizeService = Depends(self.get_openai_service),
            pregnancy_service: PregnancyDataService = Depends(self.get_pregnancy_service)
        ):
            """
            Get AI-powered nutrition tips for a specific week
            
            Args:
                week: Pregnancy week (1-40)
            
            Returns:
                Detailed nutrition information with essential nutrients and meal suggestions
            """
            try:
                if week < 1 or week > 40:
                    raise HTTPException(
                        status_code=400, 
                        detail="Week must be between 1 and 40"
                    )
                
                if not openai_service:
                    raise HTTPException(
                        status_code=503, 
                        detail="OpenAI service not available. Please check your API key configuration."
                    )
                
                # Get week data for trimester info
                week_data = pregnancy_service.get_week_data(week)
                
                # Get AI-powered nutrition tips
                nutrition_info = await openai_service.get_nutrition_tips(week)
                
                return QuickActionResponse(
                    success=True,
                    week=week,
                    trimester=week_data.trimester,
                    action_type="nutrition_tips",
                    data=nutrition_info.dict(),
                    message=f"Successfully generated nutrition tips for week {week}"
                )
            
            except ValueError as e:
                raise HTTPException(status_code=404, detail=str(e))
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
    
    def get_router(self):
        """Get the FastAPI router"""
        return self.router